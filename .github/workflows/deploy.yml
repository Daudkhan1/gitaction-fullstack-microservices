name: CI/CD with Microservices (Frontend and Backend)

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'

env:
  IMAGE_NAME_FRONTEND: frontend-app
  IMAGE_NAME_BACKEND: backend-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üîç Get latest commit message
        id: commit_msg
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          echo "commit_msg=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: üß† Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: üê≥ Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: üì¶ Build and Push Frontend Docker image
        if: contains(steps.commit_msg.outputs.commit_msg, 'frontend') || (!contains(steps.commit_msg.outputs.commit_msg, 'frontend') && !contains(steps.commit_msg.outputs.commit_msg, 'backend'))
        run: |
          echo "‚úÖ Building Frontend"
          docker buildx create --use || true
          docker buildx build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME_FRONTEND:$IMAGE_TAG \
            --push ./frontend

      - name: üì¶ Build and Push Backend Docker image
        if: contains(steps.commit_msg.outputs.commit_msg, 'backend') || (!contains(steps.commit_msg.outputs.commit_msg, 'frontend') && !contains(steps.commit_msg.outputs.commit_msg, 'backend'))
        run: |
          echo "‚úÖ Building Backend"
          docker buildx create --use || true
          docker buildx build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME_BACKEND:$IMAGE_TAG \
            --push ./backend

      - name: üîê Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: üöÄ Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOF'
            set -e

            echo "üöÄ Deployment started"

            docker network inspect microservices-net > /dev/null 2>&1 || docker network create microservices-net

            FRONTEND_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME_FRONTEND:$IMAGE_TAG"
            BACKEND_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME_BACKEND:$IMAGE_TAG"

            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            echo "üîç Commit Message: \$COMMIT_MESSAGE"

            if [[ "\$COMMIT_MESSAGE" == *"frontend"* ]]; then
              echo "üîÅ Deploying Frontend only"
              docker rm -f frontend-app || true
              docker run -d --name frontend-app --network microservices-net -p 80:80 "\$FRONTEND_IMAGE"
            elif [[ "\$COMMIT_MESSAGE" == *"backend"* ]]; then
              echo "üîÅ Deploying Backend only"
              docker rm -f backend-app || true
              docker run -d --name backend-app --network microservices-net -p 5000:5000 "\$BACKEND_IMAGE"
            else
              echo "üîÅ Deploying BOTH Frontend and Backend"
              docker rm -f frontend-app || true
              docker run -d --name frontend-app --network microservices-net -p 80:80 "\$FRONTEND_IMAGE"
              docker rm -f backend-app || true
              docker run -d --name backend-app --network microservices-net -p 5000:5000 "\$BACKEND_IMAGE"
            fi

            docker ps -a
          EOF
